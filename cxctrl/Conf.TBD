import { ActionConfigType, NodeConfiguration } from "./interfaces.ts"
import * as ctrl from "./Ctrl.ts"
import { CxError, _ } from "../cxutil/mod.ts"

const __filename = new URL('', import.meta.url).pathname

/**
 * Set the threshold and swarm configuration
 * 
 * @param name Name of the action element
 * @param config The NodeConfiguration  for the action element
 */
export let setNodeConfig = ( key: string, config: Partial<NodeConfiguration> ): void => {
    if ( ! ctrl.graph.hasNode(key) ) 
        throw new CxError(__filename, 'setNodeConfig()', 'CONF-0001', `The graph has no node with id: ${key}`)
    else {
        let currConfig = ctrl.graph.getNodeData(key)
        ctrl.graph.setNodeData( key, _.merge(currConfig, config) )
    }
}

/**
 * Set the threshold configuration, simpler user function
 * 
 * @param name Name of the storage element
 * @param _threshold The threshold for the storage element, that how many version should be stored before attempting cleanup
 */
export let setThreshold = ( key: string, _threshold: number ): void  => {
    let threshold = _threshold < 2 ? -1 : _threshold
    try {
        setNodeConfig( key, { jobThreshold: threshold } )
    }
    catch(err) {
        throw new CxError( __filename, 'setThreshold()', 'CONF-0002', `Failed to set jobThreshold due to: ${err}` )
    }
}

/**
 * Evaluate and resolve an existing node configuration and return a new configuration - this is a configuration of the job threshold and and the swarm count and max for a given action object
 * 
 * @param name The name of the action object
 * @param name The name of the action object
 * @return NodeConfiguration A new validated node configuration
 * 
 */
 export let resolveActionConfig = (name: string, maxThreshold: number): NodeConfiguration => {
    //
    // Read and resolve the threshold information
    // 
    let nodeConfig: NodeConfiguration = ctrl.graph.getNodeData(name) 
    let threshold = nodeConfig.jobThreshold
    if ( maxThreshold >= 2  && nodeConfig.jobThreshold >= 2 )  { // threshold is not unlimited
        if ( nodeConfig.jobThreshold < maxThreshold ) {
            threshold =  maxThreshold
        }
        else {
            maxThreshold  = threshold
        }
    }
    else if ( nodeConfig.jobThreshold > 0 ) { // threshold is not unlimited, but ~ 1, where 2 is the minimum
        threshold = 2
    }
    //
    // Read and resolve swarm configuration
    //
    let swarmSeed = nodeConfig.swarmSeed < 2 ? 0 : nodeConfig.swarmSeed
    let swarmMax  = nodeConfig.swarmMax < swarmSeed ? swarmSeed : nodeConfig.swarmMax
    return { 
        jobThreshold: threshold, 
        swarmSeed: swarmSeed, 
        swarmMax: swarmMax, 
        swarmChildren: nodeConfig.swarmChildren  
    }
}

